package de.qaware.dumpimporter.steps.pide

import scala.language.implicitConversions
import scala.util.parsing.combinator.Parsers
import scala.util.parsing.input.{NoPosition, Position, Reader}

import com.typesafe.scalalogging.Logger
import de.qaware.common.solr.dt.DocumentationType
import de.qaware.dumpimporter.dataaccess.treequery.QueryDsl.{all, ofOne, single}
import de.qaware.dumpimporter.dataaccess.treequery.YxmlTreeQuery.{YxmlNode, body, key, keyValue, tag}
import de.qaware.dumpimporter.dataaccess.treequery.{QueryDsl, QueryError, QueryNode}
import de.qaware.dumpimporter.steps.pide.PideField._ // scalastyle:ignore
import de.qaware.yxml.Yxml

trait PideParseError extends Throwable
final case class PideLexError(msg: String) extends PideParseError

/** Reader for ymxl nodes.
  *
  * @param nodes to read from
  */
class YxmlNodeReader(nodes: List[YxmlNode]) extends Reader[YxmlNode] {
  override def first: YxmlNode = nodes.head
  override def rest: Reader[YxmlNode] = new YxmlNodeReader(nodes.tail)
  override def pos: Position = NoPosition
  override def atEnd: Boolean = nodes.isEmpty
}

/** Lexes YXML subtrees into flat tokens. */
object PideLexer extends Parsers {
  override type Elem = YxmlNode

  private val logger = Logger[PideLexer.type]

  // Helper methods

  private def nodeMatches(query: QueryNode[YxmlNode, Either[QueryError, YxmlNode]]) = Parser { input =>
    if (input.atEnd)
      Failure("Empty input", input)
    else
      query.in(input.first) match {
        case Right(e) => Success(e, input.rest)
        case Left(error) =>
          logger.whenDebugEnabled { logger.debug(s"Could not find node: $error") }
          Failure("Required exactly one match", input)
      }
  }

  private def extractBody(node: YxmlNode) = {
    // XML_BODY tags are generated by isabelle and do not belong to the original source text
    (all thats body without (tag(XmlBody) or tag(Delete)) in node).map(_.getBody).mkString(" ")
  }

  protected def delimiterQuery(delim: PideField.Value): QueryNode[YxmlNode, Either[QueryError, YxmlNode]] = {
    single root ofOne thats tag(Delimiter) parent ofOne thats tag(NoCompletion) parent ofOne thats body(delim.toString)
  }

  // Parsing rules

  protected def typeDelimiter: Parser[TypeDelimToken.type] =
    nodeMatches(delimiterQuery(TypeDelimiter)) ^^ (_ => TypeDelimToken)

  protected def defDelimiter: Parser[DefDelimToken.type] =
    nodeMatches(delimiterQuery(DefDelimiter)) ^^ (_ => DefDelimToken)

  protected def nameDelimiter: Parser[NameDelimToken.type] =
    nodeMatches(delimiterQuery(NameDelimiter)) ^^ (_ => NameDelimToken)

  protected def where: Parser[WhereToken.type] = {
    val query = (single root ofOne thats (tag(Keyword2) and keyValue(Kind, Keyword.toString))
      parent ofOne thats body(Where.toString))
    nodeMatches(query) ^^ (_ => WhereToken)
  }

  protected def string: Parser[StringToken] =
    nodeMatches(single root ofOne thats tag(String)) ^^ (x => new StringToken(extractBody(x)))

  protected def ws: Parser[WhitespaceToken] =
    nodeMatches(single root ofOne thats body("\\s+".r)) ^^ (x => new WhitespaceToken(x.getBody))

  protected def entityDef: Parser[DefToken] = {
    // Entity defs are structured as follows: <Global ref ><Local ref/></Global ref>
    nodeMatches(single root ofOne thats (tag(Entity) and key(Def)) parent ofOne thats (tag(Entity) and key(Def))) ^^ {
      parent =>
        single thats (tag(Entity) and key(Def)) parent ofOne thats body() in parent match {
          case Left(error) =>
            logger.error(s"Could not find local definition: $error")
            throw new IllegalStateException("Could not extract entity")
          case Right(elem) => DefToken(extractBody(parent), elem.getValue(Def).toLong)
        }
    }
  }

  protected def comment: Parser[CommentToken] = nodeMatches(single root ofOne thats tag(Comment)) ^^ { commentTree =>
    (single thats tag(Cartouche) in commentTree) match {
      case Left(_) => CommentToken(extractBody(commentTree), DocumentationType.Meta)
      case Right(_) => CommentToken(extractBody(commentTree), DocumentationType.Inline)
    }
  }

  protected def any: Parser[UnknownToken] = Parser { input =>
    if (input.atEnd) {
      Failure("Empty input", input)
    } else {
      Success(new UnknownToken(extractBody(input.first)), input.rest)
    }
  }

  /** Parses all types of tokens.
    *
    * @return token list
    */
  def tokens: Parser[List[PideToken]] =
    phrase(rep((typeDelimiter | defDelimiter | nameDelimiter | where | string | ws | entityDef | comment) | any))

  /** Applies parser on given yxml.
    *
    * @param yxml yxml tree to parse
    * @return parsed token list or error if parsing failed
    */
  def apply(yxml: Yxml): Either[PideLexError, List[PideToken]] = {
    val yxmlNodes = yxml.elems.map(new YxmlNode(_))

    // Get relevant subtrees
    val topLevelNodes = all first ofOne thats QueryDsl.not(
      tag(Accepted) or tag(Running) or tag(Finished) or tag(Timing)) in yxmlNodes

    val reader = new YxmlNodeReader(topLevelNodes.toList)

    tokens(reader) match {
      case NoSuccess(msg, _) => Left(PideLexError(msg))
      case Success(result, _) => Right(result)
    }
  }
}
